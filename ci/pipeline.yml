meta:
  github_owner: (( param "Please specify the org the git repo is in" ))
  github_repo: (( param "Please specify the name of the repository" ))
  github_private_key: (( param "Please specify the private key fot github auth" ))
  github_access_token: (( param "Please specify access token for creating releases" ))
  git_uri: (( param "Please specify the uri to the git repo" ))
  git_branch: (( param "Please specify the branch to checkout" ))
  dockerhub_org: (( param "Please specify the name of the dockerhub org" ))

  keystore: (( param "Please specify the keystore in base64 encoding" ))
  store_password: (( param "Please specify the store_password" ))
  key_alias: (( param "Please specify the key_alias" ))
  key_password: (( param "Please specify the key_password" ))

  pipeline_image: (( concat meta.dockerhub_org "/risq-android-pipeline-image" ))

groups:
- name: release
  jobs:
    - test
    - rc
    - release
- name: version
  jobs:
    - auto-bump-patch
    - minor
    - major
- name: images
  jobs:
    - build-pipeline-image

jobs:
- name: auto-bump-patch
  plan:
  - in_parallel:
    - { get: repo }
    - { get: pipeline-tasks }
    - { get: version, trigger: true, params: { bump: patch, pre: rc }, passed: [release] }
  - in_parallel:
    - { put: version, params: { file: version/number } }
    - do:
      - task: set-dev-version
        config:
          image_resource:
            type: docker-image
            source: {repository: (( grab meta.pipeline_image ))}
          platform: linux
          inputs:
          - name: version
          - name: repo
          - name: pipeline-tasks
          outputs:
          - name: out-repo
          run:
            path: pipeline-tasks/ci/tasks/set-dev-version.sh
          params:
            BRANCH: (( grab meta.git_branch ))
      - put: repo
        params:
          repository: out-repo/git
          rebase: true
- name: minor
  public: true
  plan:
  - in_parallel:
    - { get: repo }
    - { get: pipeline-tasks }
    - { get: version, params: { bump: minor, pre: rc } }
  - in_parallel:
    - { put: version, params: { file: version/number } }
    - do:
      - task: set-dev-version
        config:
          image_resource:
            type: docker-image
            source: {repository: (( grab meta.pipeline_image ))}
          platform: linux
          inputs:
          - name: version
          - name: repo
          - name: pipeline-tasks
          outputs:
          - name: out-repo
          run:
            path: pipeline-tasks/ci/tasks/set-dev-version.sh
          params:
            BRANCH: (( grab meta.git_branch ))
      - put: repo
        params:
          repository: out-repo/git
          rebase: true

- name: major
  public: true
  plan:
  - in_parallel:
    - { get: repo }
    - { get: pipeline-tasks }
    - { get: version, params: { bump: minor, pre: rc } }
  - in_parallel:
    - { put: version, params: { file: version/number } }
    - do:
      - task: set-dev-version
        config:
          image_resource:
            type: docker-image
            source: {repository: (( grab meta.pipeline_image ))}
          platform: linux
          inputs:
          - name: version
          - name: repo
          - name: pipeline-tasks
          outputs:
          - name: out-repo
          run:
            path: pipeline-tasks/ci/tasks/set-dev-version.sh
          params:
            BRANCH: (( grab meta.git_branch ))
      - put: repo
        params:
          repository: out-repo/git
          rebase: true

- name: build-pipeline-image
  public: true
  serial: true
  plan:
    - {get: pipeline-image-def, trigger: true}
    - put: pipeline-image
      params:
        build: pipeline-image-def/ci/ci_image

- name: test
  public: true
  serial: true
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: pipeline-tasks }
  - in_parallel:
    - task: run-all-test
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: (( grab meta.pipeline_image ))}
        inputs:
        - name: pipeline-tasks
        - name: repo
        caches:
        - path: cargo-home
        - path: cargo-target-dir
        - path: gradle-home
        run:
          path: pipeline-tasks/ci/tasks/run-tests.sh
- name: rc
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: repo
      trigger: true
      passed:
      - test
    - { get: version, params: { pre: rc } }
  - put: version
    params: { file: version/number }

- name: release
  public: true
  serial: true
  plan:
  - in_parallel:
    - { get: version, passed: [rc], params: {bump: final} }
    - { get: version-code, params: {bump: major} }
    - { get: repo, passed: [rc] }
    - { get: pipeline-tasks }
  - task: prepare
    config:
      image_resource:
        type: docker-image
        source: {repository: (( grab meta.pipeline_image ))}
      platform: linux
      inputs:
      - name: version
      - name: version-code
      - name: repo
      - name: pipeline-tasks
      outputs:
      - name: prepared-repo
      params:
        BRANCH: (( grab meta.git_branch ))
      run:
        path: pipeline-tasks/ci/tasks/prepare-repo.sh
  - in_parallel:
    - do:
      - put: repo
        params:
          repository: prepared-repo/git
          merge: true
      - { put: version, params: { bump: final } }
      - { put: version-code, params: { bump: major } }
    - task: build-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: (( grab meta.pipeline_image ))}
        inputs:
        - name: version
        - name: pipeline-tasks
        - name: prepared-repo
        caches:
        - path: gradle-home
        outputs:
        - name: release
        params:
          KEYSTORE: (( grab meta.keystore ))
          STORE_PASSWORD: (( grab meta.store_password ))
          KEY_ALIAS: (( grab meta.key_alias ))
          KEY_PASSWORD: (( grab meta.key_password ))
        run:
          path: pipeline-tasks/ci/tasks/build-release.sh
  - task: github-release
    config:
      image_resource:
        type: docker-image
        source: {repository: (( grab meta.pipeline_image ))}
      platform: linux
      inputs:
      - name: release
      - name: version
      - name: prepared-repo
      - name: pipeline-tasks
      outputs:
      - name: gh-release
      params:
        BRANCH: (( grab meta.git_branch ))
      run:
        path: pipeline-tasks/ci/tasks/github-release.sh
  - put: github-release
    params:
      name:   gh-release/name
      tag:    gh-release/tag
      body:   gh-release/notes.md
      globs: [gh-release/artifacts/*]

resources:
- name: repo
  type: git
  source:
    ignore_paths: ["ci/*[^md]"]
    uri: (( grab meta.git_uri ))
    branch: (( grab meta.git_branch ))
    private_key: (( grab meta.github_private_key ))
- name: pipeline-tasks
  type: git
  source:
    uri: (( grab meta.git_uri ))
    branch: (( grab meta.git_branch ))
    paths: [ci/tasks/*, Makefile]
    private_key: (( grab meta.github_private_key ))
- name: pipeline-image-def
  type: git
  source:
    uri: (( grab meta.git_uri ))
    branch: (( grab meta.git_branch ))
    paths: [ci/ci_image/*]
    private_key: (( grab meta.github_private_key ))

- name: pipeline-image
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: (( grab meta.pipeline_image ))
- name: version
  type: semver
  source:
    driver: git
    uri: (( grab meta.git_uri ))
    private_key: (( grab meta.github_private_key ))
    branch: version
    file: version
    initial_version: "0.0.1"
- name: version-code
  type: semver
  source:
    driver: git
    uri: (( grab meta.git_uri ))
    private_key: (( grab meta.github_private_key ))
    branch: version
    file: version-code
    initial_version: "1.0.0"
- name: github-release
  type: github-release
  source:
    user:         (( grab meta.github_owner ))
    repository:   (( grab meta.github_repo ))
    access_token: (( grab meta.github_access_token ))
